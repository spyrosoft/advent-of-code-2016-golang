package main

import (
	"fmt"
	"strconv"
	"strings"
)

var (
	input = `RLRLLLULULULUUDUULULRDDLURURDDLDUUDDLRDDUUUDDRUDLRRDDUDUUDULUDRDULRUDRULRDRUDLDDULRRDLDRLUDDLLDRDDDUDDLUDUDULDRLLDRLULRLURDLULRUUUDRULLUUDLRDLDDUDRRRLDLRUUURRLDDRRRURLLULDUULLDRLRDLLDURDLDDULLDDLDLUURRRURLRURLLRRDURLDUDDLULUUULULLLDRRRRRLULRDUDURURLULRURRRLLUURDURULRRUULDRDLULDLLUDLUDRLUDLRRLDLLDLDUDDLULLDRULRLRULDURRDLDLLUDRLLDRRDLDUDUURUURDUUDDDLDLDDRDLUDLDUUUUDLDRLRURDLURURDLLLUURURDRDLUDLLRUDULLLDLULLULLDLDDRDRRRUDDDUDDDDRULLLLRLDDLLRDRLLLRRLDRRUDRUUURLLLRULRRDURDLDRLDDUUDUUURRLRRUDLDLDDRUDLULLUUDUUUDLUDDRUULLLURUDDDDLRUDDLLLRUR
LDLRLDDDLUDRDRRUDUURLRULLUDDRLURLUULDLLRLLUDLRLRUDLULRLRRLRURLDDDURUDUUURDRLDDLUUUDRUDUDDDLLURLLULRUULLUDRULUDDULDUDUDULLDRUUUULRDUUDLUDURDLLRLLRLUUDUUDRLLLRULUURUDLDRLLDUDLDDRULDULDURRLDDDUDUDDRUDUDRDURLLLLLULDRDDLLUDULLLUDRURLDLDLDULLDDRURRLUDDRLURLULRLDDDUUUURLRDLRURDDURLDLRRLLRLRLUURRLLDDLDRLRDUDDLLDDDURUUDURLRRDUULRRDDRRUULDRLRUDRRLDDRLDRULLDLDURRULDURRRDLRRLRLLLRLDRLLULRRLLLLLDLDDULDLLDLLDUUDDRLURUUUUULRDDLRDLRDRDRDLUDDLDDRULLUDDRLDLLUDRLUURRLUDURURLLRURRURRLRLLRLURURDDDDRRLURDUULLUU
LLRRDURRDLDULRDUDLRDRDRURULDURUDRRURDDDRLDLDRDRDRDRULDUURLULDDUURUULUDULLDUDLLLLDLLLDRLUUULLULDDRRUDDULLLULRDRULDDULDUDRDDLUUURULDLLUDUUUUURUDLLDRDULLRULLDURDRLLDLDRDDURUULUDURRRUULLDUUDDURDURLDLRRLLDURDDLRRRUDLRRRDLDRLUDLUDRDRLDDLLLRLLRURDLRDUUUURRLULDDLDLLLUDRDRLRRDURDDLURDLDDDULLLRRLDDDRULDDDLRRDULUUUDRRULDDLLLURDRRLLLUULDRRRUURRDDLULDRLULDDDLDULDRRRULRULLURLURULLLLRUDRRRDRDRDLDULURLRRRRLRUDDRRRUURUURLLRURURUURRURRDLDLLUDRRRDUDDRDURLLRLRRULD
DULRRDRLRLUDLLURURLLRLRDLLDLLDRDUURLRUUUDLLDUUDDUULDUULLRUDRURLUDRDLRUDDDLULUDLLDRULULLLDRRULDLLUURLRRRLDRDLDRURRRRDLRUUDULLRLLLDLRUDLDUUDRLDLRDRLRDLDDDUDLRUDLDDLLLDRLLRRUUDRDDUUURURRRUUDLRRDDRUDLDDULULDLRRLRDDUDRUURRUULURLURUDRRURRRULDDDDURDLUUULUULULRDLRRRRRURURRLRUULDUUURRDRRDLDUUUULLULLLLUDLUUDUURRDLDLRRRLUUURULDULDLDRLLURDRUULLLLLULLLDRURURRUDRRRRUDUDUDRUDUDRDRULUUDRURDDUUDLDLDUURUDURLRLRRDRDRDLLDUDDULLRDLDDRLLDLRDURDDULLLDLLLULDLUUUDLDRDLURUURDDLRDLLLLLRLURDLLLULLRRLU
DUULULUUDUDLLRLRURULLDLRRLURDLLDUDUDDRURRLUDULULDRRDRLUULUDDLUURURDLDDDRDRUDURLDDLUDUURULRRUUDRLURRLRLDURRRULRLDDDRUDDDDDUDDULLLRRLLDULDRULUDLRRDLLUDRDLDULRLLLUULLRULRLLLLUDDRRDRLULDLDLURDDRUDDLDLDLDRULDLLDDUUDULUULULLURDURRLLUDRULLRDUDRDRURDRDRDURUUDULDDRURUDLLUUDUUDURDLRDRURUDRUURLUUURLRLUDRUDRUURLLUDRLURDDURRUDRDRLRRLDDDRDDLUUUDDLULDUURUDUDLLDRURDURRDULRLURRDLDDRLUDRLDLRLDDUURRULDDLDUDDLRDULLDDDLDUUUUDLRUDUDLDRDLRDDLDLRLLUDDRRLUDLDUUULLDDRLRRDLRRRRUDDLRLLULRLRDURDUDDRRULLDDLDLRRDLLULDURURDDURLRLULULURRUDUDRDLURULDUDLUULDUUURLLRUDLLRDLRUDRLULDUDRRDUUDUUULUUUDDRUD`
	squareKeypad  = [][]int{{1, 4, 7}, {2, 5, 8}, {3, 6, 9}}
	diamondKeypad = [][]rune{
		// Flip over the up-left to down-right diagonal axis
		// {'X', 'X', '1', 'X', 'X'},
		// {'X', '2', '3', '4', 'X'},
		// {'5', '6', '7', '8', '9'},
		// {'X', 'A', 'B', 'C', 'X'},
		// {'X', 'X', 'D', 'X', 'X'},

		{'X', 'X', '5', 'X', 'X'},
		{'X', '2', '6', 'A', 'X'},
		{'1', '3', '7', 'B', 'D'},
		{'X', '4', '8', 'C', 'X'},
		{'X', 'X', '9', 'X', 'X'},
	}
	squareDoorCode  = ""
	diamondDoorCode = ""
	x               = 0
	y               = 0
)

func main() {
	instructions := strings.Split(input, "\n")
	setSquareState()
	loopThroughSquareInstructions(instructions)
	fmt.Println("Square Door Code:", squareDoorCode)
	setDiamondState()
	loopThroughDiamondInstructions(instructions)
	fmt.Println("Diamond Door Code:", diamondDoorCode)
}

func setSquareState() {
	squareDoorCode = ""
	x = 1
	y = 1
}

func setDiamondState() {
	diamondDoorCode = ""
	x = 0
	y = 2
}

func loopThroughSquareInstructions(instructions []string) {
	for _, instruction := range instructions {
		//fmt.Println("Instruction: ", instruction)
		locateNextSquareButton(instruction)
		pushSquareButton()
	}
}

func locateNextSquareButton(instruction string) {
	for _, i := range instruction {
		//fmt.Print(string(i), " ")
		if i == 'U' {
			y = moveSquare(-1, y)
		} else if i == 'R' {
			x = moveSquare(1, x)
		} else if i == 'D' {
			y = moveSquare(1, y)
		} else if i == 'L' {
			x = moveSquare(-1, x)
		}
		//fmt.Print(squareKeypad[x][y], ": (", x, ", ", y, ") - ")
	}
}

func moveSquare(distance int, position int) int {
	if position+distance > 2 || position+distance < 0 {
		return position
	}
	return position + distance
}

func pushSquareButton() {
	//fmt.Println("Push square button:", squareKeypad[x][y])
	squareDoorCode += strconv.Itoa(squareKeypad[x][y])
}

func loopThroughDiamondInstructions(instructions []string) {
	for _, instruction := range instructions {
		//fmt.Println("Instruction:", instruction)
		locateNextDiamondButton(instruction)
		pushDiamondButton()
	}
}

func locateNextDiamondButton(instruction string) {
	for _, i := range instruction {
		if i == 'U' {
			moveDiamondY(-1)
		} else if i == 'R' {
			moveDiamondX(1)
		} else if i == 'D' {
			moveDiamondY(1)
		} else if i == 'L' {
			moveDiamondX(-1)
		}
		//fmt.Println(string(i), "(", x, ",", y, "):", string(diamondKeypad[x][y]))
	}
}

func moveDiamondY(distance int) {
	if y+distance > 4 || y+distance < 0 || diamondKeypad[x][y+distance] == 'X' {
		return
	}
	y += distance
}

func moveDiamondX(distance int) {
	if x+distance > 4 || x+distance < 0 || diamondKeypad[x+distance][y] == 'X' {
		return
	}
	x += distance
}

func pushDiamondButton() {
	//fmt.Println(string(diamondKeypad[x][y]))
	diamondDoorCode += string(diamondKeypad[x][y])
}
